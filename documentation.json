{
    "pipes": [
        {
            "name": "SearchBooksPipe",
            "id": "pipe-SearchBooksPipe-4fe5603bb37165340748ead95aa59cc3",
            "file": "src/app/books/pipes/search-books.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        },
                        {
                            "name": "searchText",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Book[]",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchText",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": true,
            "ngname": "searchBooks",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Book } from '../../api/books';\n\n@Pipe({\n  name: 'searchBooks',\n  pure: true\n})\nexport class SearchBooksPipe implements PipeTransform {\n\n  transform(books: Book[], searchText: string): Book[] {\n    const lowerSearchText = searchText.toLocaleLowerCase();\n    return books.filter(book => book.title.toLocaleLowerCase().includes(lowerSearchText) || book.synopsis.some(s => s.toLocaleLowerCase().includes(lowerSearchText)));\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-99aa802931915cd0ee6e5efb00637cc3",
            "file": "src/app/app.state.ts",
            "type": "interface",
            "sourceCode": "import { createSelector } from '@ngrx/store';\nimport { ShoppingCartItem } from './shopping-cart/store/shopping-cart';\nimport { ShoppingCartState } from './shopping-cart/store/shopping-cart.reducer';\n\nexport interface AppState {\n  shoppingCart: ShoppingCartState\n}\n\nexport const getShoppingCartState = (state: AppState) => state.shoppingCart;\n\nexport const getShoppingCartItems = createSelector(\n  getShoppingCartState,\n  (shoppingCartState: ShoppingCartState) => shoppingCartState.items\n);\n\nexport const getTotalPrice = createSelector(\n  getShoppingCartItems,\n  (items: ShoppingCartItem[]) => items.reduce((acc, item) => acc + (item.quantity * item.book.price), 0)\n);\n\nexport const getShoppingCartItemsCount = createSelector(\n  getShoppingCartState,\n  (shoppingCartState: ShoppingCartState) => {\n    return shoppingCartState.items.reduce((acc, item) => acc + item.quantity, 0);\n  }\n);\n\nexport const getShoppingCartItemQuantity = (isbn: string) => {\n  return createSelector(\n    getShoppingCartState,\n    (shoppingCartState: ShoppingCartState) => {\n      const item = shoppingCartState.items.find(i => i.book.isbn === isbn);\n\n      if (item) {\n        return item.quantity;\n      } else {\n        return 0;\n      }\n    }\n  );\n};\n",
            "properties": [
                {
                    "name": "shoppingCart",
                    "type": "ShoppingCartState",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BestOffer",
            "id": "interface-BestOffer-31eea59e66f995c9ce265c44819467b6",
            "file": "src/app/shopping-cart/services/shopping-cart.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Offer } from '../../api/books';\n\nexport interface BestOffer {\n  offer: Offer;\n  discount: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingCartService {\n\n  constructor() { }\n\n  getBestOffer(total: number, offers: Offer[]): BestOffer {\n    const discounts = offers.map(offer => this.getDiscount(total, offer));\n    let minimalPriceIndex = 0;\n\n    for (let i = 0; i < discounts.length; i++) {\n      if (discounts[i] > discounts[minimalPriceIndex]) {\n        minimalPriceIndex = i;\n      }\n    }\n\n    return {\n      offer: offers[minimalPriceIndex],\n      discount: discounts[minimalPriceIndex]\n    };\n  }\n\n  getDiscount(total: number, offer: Offer): number {\n    switch (offer.type) {\n      case 'minus':\n        return offer.value;\n      case 'percentage':\n        return total * (offer.value / 100);\n      case 'slice':\n          return Math.floor(total / offer.sliceValue) * offer.value;\n      default:\n        throw new Error('Unrecognized offer type');\n    }\n  }\n\n  // applyOffer(total: number, offer: Offer): number {\n  //   switch (offer.type) {\n  //     case 'minus':\n  //       return total - offer.value;\n  //     case 'percentage':\n  //       return total - (total * (offer.value / 100));\n  //     case 'slice':\n  //         return total - (Math.floor(total / offer.sliceValue) * offer.value);\n  //     default:\n  //       return total;\n  //   }\n  // }\n}\n",
            "properties": [
                {
                    "name": "discount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "offer",
                    "type": "Offer",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Book",
            "id": "interface-Book-d1ff7ccaf7a1089957eca8e3c0ed88c7",
            "file": "src/app/api/books.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\n  isbn: string;\n  title: string;\n  price: number;\n  cover: string;\n  synopsis: string[];\n}\n\nexport interface CommercialOffers {\n  offers: Offer[];\n}\n\nexport type Offer = PercentageOffer | MinusOffer | SliceOffer;\n\nexport interface PercentageOffer {\n  type: 'percentage';\n  value: number;\n}\n\nexport interface MinusOffer {\n  type: 'minus';\n  value: number;\n}\n\nexport interface SliceOffer {\n  type: 'slice';\n  value: number;\n  sliceValue: number;\n}\n",
            "properties": [
                {
                    "name": "cover",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isbn",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "synopsis",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CommercialOffers",
            "id": "interface-CommercialOffers-d1ff7ccaf7a1089957eca8e3c0ed88c7",
            "file": "src/app/api/books.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\n  isbn: string;\n  title: string;\n  price: number;\n  cover: string;\n  synopsis: string[];\n}\n\nexport interface CommercialOffers {\n  offers: Offer[];\n}\n\nexport type Offer = PercentageOffer | MinusOffer | SliceOffer;\n\nexport interface PercentageOffer {\n  type: 'percentage';\n  value: number;\n}\n\nexport interface MinusOffer {\n  type: 'minus';\n  value: number;\n}\n\nexport interface SliceOffer {\n  type: 'slice';\n  value: number;\n  sliceValue: number;\n}\n",
            "properties": [
                {
                    "name": "offers",
                    "type": "Offer[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MinusOffer",
            "id": "interface-MinusOffer-d1ff7ccaf7a1089957eca8e3c0ed88c7",
            "file": "src/app/api/books.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\n  isbn: string;\n  title: string;\n  price: number;\n  cover: string;\n  synopsis: string[];\n}\n\nexport interface CommercialOffers {\n  offers: Offer[];\n}\n\nexport type Offer = PercentageOffer | MinusOffer | SliceOffer;\n\nexport interface PercentageOffer {\n  type: 'percentage';\n  value: number;\n}\n\nexport interface MinusOffer {\n  type: 'minus';\n  value: number;\n}\n\nexport interface SliceOffer {\n  type: 'slice';\n  value: number;\n  sliceValue: number;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "value",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PercentageOffer",
            "id": "interface-PercentageOffer-d1ff7ccaf7a1089957eca8e3c0ed88c7",
            "file": "src/app/api/books.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\n  isbn: string;\n  title: string;\n  price: number;\n  cover: string;\n  synopsis: string[];\n}\n\nexport interface CommercialOffers {\n  offers: Offer[];\n}\n\nexport type Offer = PercentageOffer | MinusOffer | SliceOffer;\n\nexport interface PercentageOffer {\n  type: 'percentage';\n  value: number;\n}\n\nexport interface MinusOffer {\n  type: 'minus';\n  value: number;\n}\n\nexport interface SliceOffer {\n  type: 'slice';\n  value: number;\n  sliceValue: number;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "value",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingCartItem",
            "id": "interface-ShoppingCartItem-bbc3f1278c6ff612c6b41ad4ecc18085",
            "file": "src/app/shopping-cart/store/shopping-cart.ts",
            "type": "interface",
            "sourceCode": "import { Book } from '../../api/books';\n\nexport interface ShoppingCartItem {\n  quantity: number;\n  book: Book;\n}\n",
            "properties": [
                {
                    "name": "book",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "quantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingCartState",
            "id": "interface-ShoppingCartState-4b52e25cfad9d39b05091f3d26db6a1f",
            "file": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\n\nimport * as BooksSearchPageActions from '../../books/store/books-search.actions';\nimport { ShoppingCartItem } from './shopping-cart';\n\nexport interface ShoppingCartState {\n  items: ShoppingCartItem[]\n}\n\nexport const initialState: ShoppingCartState = {\n  items: []\n}\n\nexport const shoppingCartReducer = createReducer(\n  initialState,\n  on(BooksSearchPageActions.addToCart, (state, book) => {\n    const index = state.items.findIndex(item => item.book.isbn === book.isbn);\n\n    if (index >= 0) {\n      return {\n        ...state,\n        items: [\n          ...state.items.slice(0, index),\n          {\n            book,\n            quantity: state.items[index].quantity + 1\n          },\n          ...state.items.slice(index + 1)\n        ]\n      };\n    } else {\n      return {\n        ...state,\n        items: [\n          ...state.items,\n          {\n            book,\n            quantity: 1\n          }\n        ]\n      };\n    }\n  }),\n  on(BooksSearchPageActions.removeFromCart, (state, book) => {\n    const index = state.items.findIndex(item => item.book.isbn === book.isbn);\n\n    if (index >= 0) {\n      if (state.items[index].quantity - 1 === 0) {\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            ...state.items.slice(index + 1)\n          ]\n        };\n      } else {\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            {\n              book,\n              quantity: state.items[index].quantity - 1\n            },\n            ...state.items.slice(index + 1)\n          ]\n        };\n      }\n    } else {\n      return state;\n    }\n  })\n);\n\nexport function reducer(state: ShoppingCartState | undefined, action: Action) {\n  return shoppingCartReducer(state, action);\n}\n",
            "properties": [
                {
                    "name": "items",
                    "type": "ShoppingCartItem[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SliceOffer",
            "id": "interface-SliceOffer-d1ff7ccaf7a1089957eca8e3c0ed88c7",
            "file": "src/app/api/books.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\n  isbn: string;\n  title: string;\n  price: number;\n  cover: string;\n  synopsis: string[];\n}\n\nexport interface CommercialOffers {\n  offers: Offer[];\n}\n\nexport type Offer = PercentageOffer | MinusOffer | SliceOffer;\n\nexport interface PercentageOffer {\n  type: 'percentage';\n  value: number;\n}\n\nexport interface MinusOffer {\n  type: 'minus';\n  value: number;\n}\n\nexport interface SliceOffer {\n  type: 'slice';\n  value: number;\n  sliceValue: number;\n}\n",
            "properties": [
                {
                    "name": "sliceValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "value",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BooksService",
            "id": "injectable-BooksService-64bc6d88dddfb86d537ed20ff188c035",
            "file": "src/app/api/books.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://henri-potier.techx.fr'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "getAllBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Book[]>",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "getCommercialOffers",
                    "args": [
                        {
                            "name": "isbn",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CommercialOffers>",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "isbn",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { Book, CommercialOffers, Offer } from './books';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BooksService {\n\n  baseUrl = 'https://henri-potier.techx.fr';\n\n  constructor(private _http: HttpClient) { }\n\n  getAllBooks(): Observable<Book[]> {\n    return this._http.get<Book[]>(`${this.baseUrl}/books`);\n  }\n\n  getCommercialOffers(isbn: string[]): Observable<CommercialOffers> {\n    return this._http.get<CommercialOffers>(`${this.baseUrl}/books/${isbn.join(',')}/commercialOffers`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingCartService",
            "id": "injectable-ShoppingCartService-31eea59e66f995c9ce265c44819467b6",
            "file": "src/app/shopping-cart/services/shopping-cart.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getBestOffer",
                    "args": [
                        {
                            "name": "total",
                            "type": "number"
                        },
                        {
                            "name": "offers",
                            "type": "Offer[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "BestOffer",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "total",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offers",
                            "type": "Offer[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDiscount",
                    "args": [
                        {
                            "name": "total",
                            "type": "number"
                        },
                        {
                            "name": "offer",
                            "type": "Offer"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "total",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offer",
                            "type": "Offer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Offer } from '../../api/books';\n\nexport interface BestOffer {\n  offer: Offer;\n  discount: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingCartService {\n\n  constructor() { }\n\n  getBestOffer(total: number, offers: Offer[]): BestOffer {\n    const discounts = offers.map(offer => this.getDiscount(total, offer));\n    let minimalPriceIndex = 0;\n\n    for (let i = 0; i < discounts.length; i++) {\n      if (discounts[i] > discounts[minimalPriceIndex]) {\n        minimalPriceIndex = i;\n      }\n    }\n\n    return {\n      offer: offers[minimalPriceIndex],\n      discount: discounts[minimalPriceIndex]\n    };\n  }\n\n  getDiscount(total: number, offer: Offer): number {\n    switch (offer.type) {\n      case 'minus':\n        return offer.value;\n      case 'percentage':\n        return total * (offer.value / 100);\n      case 'slice':\n          return Math.floor(total / offer.sliceValue) * offer.value;\n      default:\n        throw new Error('Unrecognized offer type');\n    }\n  }\n\n  // applyOffer(total: number, offer: Offer): number {\n  //   switch (offer.type) {\n  //     case 'minus':\n  //       return total - offer.value;\n  //     case 'percentage':\n  //       return total - (total * (offer.value / 100));\n  //     case 'slice':\n  //         return total - (Math.floor(total / offer.sliceValue) * offer.value);\n  //     default:\n  //       return total;\n  //   }\n  // }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-33fad59fedf960701c517ebd929ccb4c",
            "file": "src/app/app.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\n\n<main class=\"container\">\n  <router-outlet></router-outlet>\n</main>\n"
        },
        {
            "name": "BookCardComponent",
            "id": "component-BookCardComponent-c4aabb4190084e00cbb746379215f677",
            "file": "src/app/books/components/book-card/book-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-card",
            "styleUrls": [
                "./book-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./book-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "book",
                    "line": 20,
                    "type": "Book"
                },
                {
                    "name": "quantity",
                    "defaultValue": "0",
                    "line": 23,
                    "type": "number | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addToCart",
                    "defaultValue": "new EventEmitter()",
                    "line": 26,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "removeFromCart",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output\n} from '@angular/core';\n\nimport { Book } from '../../../api/books';\n\n@Component({\n  selector: 'app-book-card',\n  templateUrl: './book-card.component.html',\n  styleUrls: ['./book-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BookCardComponent {\n\n  @Input()\n  book?: Book;\n\n  @Input()\n  quantity: number | null = 0;\n\n  @Output()\n  addToCart: EventEmitter<void> = new EventEmitter();\n\n  @Output()\n  removeFromCart: EventEmitter<void> = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".book-item {\n//   display: flex;\n//   gap: 15px;\n\n  min-height: 200px;\n\n//   border: 1px solid;\n\n//   &__cover {\n//     flex: 100px 0 0;\n//   }\n\n//   &__info {\n//     flex-grow: 1;\n//   }\n\n//   &__action {\n//     flex: 100px 0 0;\n//   }\n}\n\n// .book-cover__image {\n//   width: 100%;\n//   height: auto;\n// }\n\n.book-info {\n//   display: flex;\n//   flex-flow: column;\n\n//   &__title {\n//     margin: 0;\n//   }\n\n  &__summary {\n//     height: 100%;\n//     overflow: auto;\n    text-align: justify;\n  }\n}\n\n\n",
                    "styleUrl": "./book-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<article class=\"book-item card my-4\">\n  <div class=\"row g-0\">\n\n    <div class=\"book-item__cover book-cover col-md-2 text-center\">\n      <img [src]=\"book?.cover\" class=\"book-cover__image img-fluid p-2\" />\n    </div>\n\n    <div class=\"book-item__info book-info card-body col-md-8\">\n      <h5 class=\"book-info__title card-title\">{{ book?.title }}</h5>\n      <div class=\"book-info__summary overflow-auto\">\n        <p *ngFor=\"let synopsisParagraph of book?.synopsis\" class=\"card-text\">\n          {{ synopsisParagraph }}\n        </p>\n      </div>\n    </div>\n\n    <div class=\"book-item__action book-action col-md-2 border-start p-3\">\n      <div class=\"book-action__price mb-4 fs-5\">\n        prix: <strong>{{ book?.price | currency: 'EUR' }}</strong>\n      </div>\n\n      <div class=\"book-action__add\">\n        <app-book-quantity [quantity]=\"quantity\"\n                           (addToCart)=\"addToCart.emit()\"\n                           (removeFromCart)=\"removeFromCart.emit()\">\n        </app-book-quantity>\n      </div>\n    </div>\n\n  </div>\n</article>\n"
        },
        {
            "name": "BookQuantityComponent",
            "id": "component-BookQuantityComponent-c7e3dccf0cd090a6e5bb97efe55e78b1",
            "file": "src/app/books/components/book-card/book-quantity/book-quantity.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-quantity",
            "styleUrls": [
                "./book-quantity.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./book-quantity.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "quantity",
                    "defaultValue": "0",
                    "line": 20,
                    "type": "number | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addToCart",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "removeFromCart",
                    "defaultValue": "new EventEmitter()",
                    "line": 26,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output\n} from '@angular/core';\n\nimport { Book } from '../../../../api/books';\n\n@Component({\n  selector: 'app-book-quantity',\n  templateUrl: './book-quantity.component.html',\n  styleUrls: ['./book-quantity.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BookQuantityComponent {\n\n  @Input()\n  quantity: number | null = 0;\n\n  @Output()\n  addToCart: EventEmitter<void> = new EventEmitter();\n\n  @Output()\n  removeFromCart: EventEmitter<void> = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./book-quantity.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"d-grid\">\n  <ng-container *ngIf=\"quantity; else noQuantityTemplate\">\n    <div class=\"row g-0 bg-light border\">\n      <button class=\"btn btn-primary col-3\" (click)=\"removeFromCart.emit()\">-</button>\n      <div class=\"col text-center\">{{ quantity }}</div>\n      <button class=\"btn btn-primary col-3\" (click)=\"addToCart.emit()\">+</button>\n    </div>\n  </ng-container>\n  <ng-template #noQuantityTemplate>\n    <button class=\"btn btn-primary\" (click)=\"addToCart.emit()\">Ajouter au Panier</button>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "BooksSearchComponent",
            "id": "component-BooksSearchComponent-cc19994eaff2f4ea0256c7a4291a4fcf",
            "file": "src/app/books/containers/books-search/books-search.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-books-search",
            "styleUrls": [
                "./books-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./books-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_books$",
                    "type": "Observable<Book[]>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "_searchText",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getShoppingCartItemQuantity",
                    "args": [
                        {
                            "name": "isbn",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "isbn",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAddToCart",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveFromCart",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Book } from '../../../api/books';\nimport { BooksService } from '../../../api/books.service';\nimport * as FromRoot from '../../../app.state';\nimport { addToCart, removeFromCart } from '../../store/books-search.actions';\nimport { ShoppingCartItem } from '../../../shopping-cart/store/shopping-cart';\n\n@Component({\n  selector: 'app-books-search',\n  templateUrl: './books-search.component.html',\n  styleUrls: ['./books-search.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BooksSearchComponent {\n\n  _books$: Observable<Book[]>;\n  _searchText: string = '';\n\n  constructor(\n    private _store: Store<FromRoot.AppState>,\n    private _booksService: BooksService,\n  ) {\n    this._books$ = this._booksService.getAllBooks();\n  }\n\n  onAddToCart(book: Book): void {\n    this._store.dispatch(addToCart(book));\n  }\n\n  onRemoveFromCart(book: Book): void {\n    this._store.dispatch(removeFromCart(book));\n  }\n\n  getShoppingCartItemQuantity(isbn: string): Observable<number> {\n    return this._store.select(FromRoot.getShoppingCartItemQuantity(isbn));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./books-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<FromRoot.AppState>"
                    },
                    {
                        "name": "_booksService",
                        "type": "BooksService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<FromRoot.AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"my-4\">\n  <input class=\"form-control\" type=\"search\" placeholder=\"Rechercher un livre...\" [(ngModel)]=\"_searchText\" />\n</div>\n\n<ng-container *ngIf=\"_books$ | async as books; else loadingTemplate\">\n  <app-book-card *ngFor=\"let book of books | searchBooks: _searchText\"\n                 [book]=\"book\"\n                 [quantity]=\"getShoppingCartItemQuantity(book.isbn) | async\"\n                 (addToCart)=\"onAddToCart(book)\"\n                 (removeFromCart)=\"onRemoveFromCart(book)\">\n  </app-book-card>\n</ng-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"text-center\">\n    <div class=\"spinner-border\" role=\"status\">\n      <span class=\"visually-hidden\">Loading...</span>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-8ce5752716c3bca42c52faca8f35b372",
            "file": "src/app/core/header/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_itemsCount$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport * as FromRoot from '../../app.state';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n  _itemsCount$: Observable<number>;\n\n  constructor(private _store: Store<FromRoot.AppState>) {\n    this._itemsCount$ = this._store.select(FromRoot.getShoppingCartItemsCount);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .page-header {\n//   display: flex;\n\n//   position: sticky;\n//   top: 0;\n\n//   border-bottom: 1px solid;\n\n//   &__title {\n//     font-size: 1rem;\n\n//     margin: 0;\n//     padding: 5px;\n\n//     a {\n//       text-decoration: none;\n//     }\n//   }\n\n//   &__action {\n//     display: block;\n//     padding: 5px;\n\n//     text-decoration: none;\n//   }\n// }\n\n// .spacer {\n//   flex-grow: 1;\n// }\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<FromRoot.AppState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<FromRoot.AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<header class=\"navbar navbar-light bg-white sticky-top border-bottom\">\n  <div class=\"container-fluid\">\n    <a class=\"navbar-brand\" routerLink=\"/\">Henri Potier Store</a>\n\n    <a class=\"btn btn-outline-primary\" routerLink=\"/shopping-cart\"><span *ngIf=\"_itemsCount$ | async as itemsCount\" class=\"badge rounded-pill bg-primary\">{{ itemsCount }}</span> Panier</a>\n  </div>\n</header>\n"
        },
        {
            "name": "ShoppingCartComponent",
            "id": "component-ShoppingCartComponent-829f64e219ee8d4d37069299e3f06944",
            "file": "src/app/shopping-cart/containers/shopping-cart-summary/shopping-cart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-cart",
            "styleUrls": [
                "./shopping-cart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_bestOffer$",
                    "type": "Observable<BestOffer>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "_shoppingCartItems$",
                    "type": "Observable<ShoppingCartItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "_totalPrice$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { ShoppingCartItem } from '../../store/shopping-cart';\nimport * as FromRoot from '../../../app.state';\nimport { BooksService } from '../../../api/books.service';\nimport { CommercialOffers } from '../../../api/books';\nimport { ShoppingCartService, BestOffer } from '../../services/shopping-cart.service';\n\n@Component({\n  selector: 'app-shopping-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShoppingCartComponent {\n\n  _shoppingCartItems$: Observable<ShoppingCartItem[]>;\n  _totalPrice$: Observable<number>;\n  _bestOffer$: Observable<BestOffer>;\n\n  constructor(\n    private _store: Store<FromRoot.AppState>,\n    private _shoppingCartService: ShoppingCartService,\n    private _booksService: BooksService\n  ) {\n    this._shoppingCartItems$ = this._store.select(FromRoot.getShoppingCartItems);\n    this._totalPrice$ = this._store.select(FromRoot.getTotalPrice);\n\n    const offers$: Observable<CommercialOffers> = this._shoppingCartItems$\n      .pipe(\n        switchMap(items => this._booksService.getCommercialOffers(items.map(i => i.book.isbn)))\n      );\n\n    this._bestOffer$ = combineLatest([\n        this._totalPrice$,\n        offers$\n      ])\n      .pipe(\n        map(([total, { offers }]) => this._shoppingCartService.getBestOffer(total, offers))\n      );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-cart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<FromRoot.AppState>"
                    },
                    {
                        "name": "_shoppingCartService",
                        "type": "ShoppingCartService"
                    },
                    {
                        "name": "_booksService",
                        "type": "BooksService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<FromRoot.AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_shoppingCartService",
                        "type": "ShoppingCartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"row my-4\">\n  <div class=\"card col-md-8\">\n    <div class=\"card-body\">\n      <h4 class=\"card-title\">Panier</h4>\n      <ng-container *ngIf=\"_shoppingCartItems$ | async as items\">\n        <ng-container *ngIf=\"items.length > 0; else emptyCartTemplate\">\n\n          <app-shopping-cart-summary [items]=\"items\"\n                                     [total]=\"_totalPrice$ | async\"\n                                     [bestOffer]=\"_bestOffer$ | async\">\n          </app-shopping-cart-summary>\n\n        </ng-container>\n\n        <ng-template #emptyCartTemplate>\n          Votre panier est vide\n        </ng-template>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ShoppingCartSummaryComponent",
            "id": "component-ShoppingCartSummaryComponent-01d391f78ae72e54ccd574c1b176cb07",
            "file": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-cart-summary",
            "styleUrls": [
                "./shopping-cart-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-cart-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bestOffer",
                    "line": 21,
                    "type": "BestOffer | null"
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "ShoppingCartItem[]"
                },
                {
                    "name": "total",
                    "defaultValue": "0",
                    "line": 18,
                    "type": "number | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { BestOffer } from '../../services/shopping-cart.service';\nimport { ShoppingCartItem } from '../../store/shopping-cart';\n\n@Component({\n  selector: 'app-shopping-cart-summary',\n  templateUrl: './shopping-cart-summary.component.html',\n  styleUrls: ['./shopping-cart-summary.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShoppingCartSummaryComponent {\n\n  @Input()\n  items: ShoppingCartItem[] = [];\n\n  @Input()\n  total: number | null = 0;\n\n  @Input()\n  bestOffer?: BestOffer | null;\n\n  get finalPrice(): number | null {\n    if (this.bestOffer && this.total) {\n      return this.total - this.bestOffer.discount;\n    } else {\n      return this.total;\n    }\n  }\n\n  constructor() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-cart-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 29
            },
            "accessors": {
                "finalPrice": {
                    "name": "finalPrice",
                    "getSignature": {
                        "name": "finalPrice",
                        "type": "",
                        "returnType": "number | null",
                        "line": 23
                    }
                }
            },
            "templateData": "<table class=\"table\" >\n  <tbody>\n    <tr *ngFor=\"let item of items\">\n      <td>{{ item.book.title }}</td>\n      <td class=\"text-end\">{{ item.quantity }} x {{ item.book.price | currency: 'EUR' }}</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr *ngIf=\"bestOffer\" class=\"text-danger\">\n      <td scope=\"row\" [ngSwitch]=\"bestOffer.offer.type\">\n        <ng-container *ngSwitchCase=\"'percentage'\">\n          Offre -{{ bestOffer.offer.value / 100 | percent }}\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'minus'\">\n          Offre -{{ bestOffer.offer.value | currency: 'EUR' }}\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'slice'\">\n          Offre -{{ bestOffer.offer.value | currency: 'EUR' }} chaque {{ $any(bestOffer.offer).sliceValue | currency: 'EUR' }}\n        </ng-container>\n      </td>\n      <td class=\"text-end\">-{{ bestOffer.discount | currency: 'EUR' }}</td>\n    </tr>\n    <tr>\n      <td scope=\"row\">Total</td>\n      <td class=\"text-end\">\n        <span *ngIf=\"bestOffer\" class=\"text-decoration-line-through\">{{ total | currency: 'EUR' }}</span>&nbsp;\n        <span>{{ finalPrice | currency: 'EUR' }}</span>\n      </td>\n    </tr>\n  </tfoot>\n</table>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BooksModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BookCardComponent"
                        },
                        {
                            "name": "BookQuantityComponent"
                        },
                        {
                            "name": "BooksSearchComponent"
                        },
                        {
                            "name": "SearchBooksPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BooksRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BooksRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingCartModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShoppingCartComponent"
                        },
                        {
                            "name": "ShoppingCartSummaryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShoppingCartRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingCartRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                "type": "object",
                "defaultValue": "{\n  addToCart: action('addToCart'),\n  removeFromCart: action('removeFromCart'),\n}"
            },
            {
                "name": "addToCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/store/books-search.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Books Search Page] Add to Cart',\n  props<Book>()\n)"
            },
            {
                "name": "CartWithOffer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "getShoppingCartItemQuantity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.state.ts",
                "type": "",
                "defaultValue": "(isbn: string) => {\n  return createSelector(\n    getShoppingCartState,\n    (shoppingCartState: ShoppingCartState) => {\n      const item = shoppingCartState.items.find(i => i.book.isbn === isbn);\n\n      if (item) {\n        return item.quantity;\n      } else {\n        return 0;\n      }\n    }\n  );\n}"
            },
            {
                "name": "getShoppingCartItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.state.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getShoppingCartState,\n  (shoppingCartState: ShoppingCartState) => shoppingCartState.items\n)"
            },
            {
                "name": "getShoppingCartItemsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.state.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getShoppingCartState,\n  (shoppingCartState: ShoppingCartState) => {\n    return shoppingCartState.items.reduce((acc, item) => acc + item.quantity, 0);\n  }\n)"
            },
            {
                "name": "getShoppingCartState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.state.ts",
                "type": "",
                "defaultValue": "(state: AppState) => state.shoppingCart"
            },
            {
                "name": "getTotalPrice",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.state.ts",
                "type": "",
                "defaultValue": "createSelector(\n  getShoppingCartItems,\n  (items: ShoppingCartItem[]) => items.reduce((acc, item) => acc + (item.quantity * item.book.price), 0)\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                "type": "ShoppingCartState",
                "defaultValue": "{\n  items: []\n}"
            },
            {
                "name": "removeFromCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/store/books-search.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Books Search Page] Remove from Cart',\n  props<Book>()\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "shoppingCartReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(BooksSearchPageActions.addToCart, (state, book) => {\n    const index = state.items.findIndex(item => item.book.isbn === book.isbn);\n\n    if (index >= 0) {\n      return {\n        ...state,\n        items: [\n          ...state.items.slice(0, index),\n          {\n            book,\n            quantity: state.items[index].quantity + 1\n          },\n          ...state.items.slice(index + 1)\n        ]\n      };\n    } else {\n      return {\n        ...state,\n        items: [\n          ...state.items,\n          {\n            book,\n            quantity: 1\n          }\n        ]\n      };\n    }\n  }),\n  on(BooksSearchPageActions.removeFromCart, (state, book) => {\n    const index = state.items.findIndex(item => item.book.isbn === book.isbn);\n\n    if (index >= 0) {\n      if (state.items[index].quantity - 1 === 0) {\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            ...state.items.slice(index + 1)\n          ]\n        };\n      } else {\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            {\n              book,\n              quantity: state.items[index].quantity - 1\n            },\n            ...state.items.slice(index + 1)\n          ]\n        };\n      }\n    } else {\n      return state;\n    }\n  })\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/header/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "args => ({\n  props: {\n    ...args\n  }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                "type": "Story<ShoppingCartSummaryComponent>",
                "defaultValue": "args => ({\n  props: {\n    ...args\n  }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                "type": "Story<BookQuantityComponent>",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    addToCart: actionsData.addToCart,\n    removeFromCart: actionsData.removeFromCart\n  }\n})"
            },
            {
                "name": "WithQuantity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Offer",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "PercentageOffer | MinusOffer | SliceOffer",
                "file": "src/app/api/books.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  addToCart: action('addToCart'),\n  removeFromCart: action('removeFromCart'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                    "type": "Story<BookQuantityComponent>",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    addToCart: actionsData.addToCart,\n    removeFromCart: actionsData.removeFromCart\n  }\n})"
                },
                {
                    "name": "WithQuantity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/books/store/books-search.actions.ts": [
                {
                    "name": "addToCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/store/books-search.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Books Search Page] Add to Cart',\n  props<Book>()\n)"
                },
                {
                    "name": "removeFromCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/store/books-search.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Books Search Page] Remove from Cart',\n  props<Book>()\n)"
                }
            ],
            "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts": [
                {
                    "name": "CartWithOffer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                    "type": "Story<ShoppingCartSummaryComponent>",
                    "defaultValue": "args => ({\n  props: {\n    ...args\n  }\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/core/header/header.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/header/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "args => ({\n  props: {\n    ...args\n  }\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/app.state.ts": [
                {
                    "name": "getShoppingCartItemQuantity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.state.ts",
                    "type": "",
                    "defaultValue": "(isbn: string) => {\n  return createSelector(\n    getShoppingCartState,\n    (shoppingCartState: ShoppingCartState) => {\n      const item = shoppingCartState.items.find(i => i.book.isbn === isbn);\n\n      if (item) {\n        return item.quantity;\n      } else {\n        return 0;\n      }\n    }\n  );\n}"
                },
                {
                    "name": "getShoppingCartItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.state.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getShoppingCartState,\n  (shoppingCartState: ShoppingCartState) => shoppingCartState.items\n)"
                },
                {
                    "name": "getShoppingCartItemsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.state.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getShoppingCartState,\n  (shoppingCartState: ShoppingCartState) => {\n    return shoppingCartState.items.reduce((acc, item) => acc + item.quantity, 0);\n  }\n)"
                },
                {
                    "name": "getShoppingCartState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.state.ts",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.shoppingCart"
                },
                {
                    "name": "getTotalPrice",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.state.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  getShoppingCartItems,\n  (items: ShoppingCartItem[]) => items.reduce((acc, item) => acc + (item.quantity * item.book.price), 0)\n)"
                }
            ],
            "src/app/shopping-cart/store/shopping-cart.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                    "type": "ShoppingCartState",
                    "defaultValue": "{\n  items: []\n}"
                },
                {
                    "name": "shoppingCartReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(BooksSearchPageActions.addToCart, (state, book) => {\n    const index = state.items.findIndex(item => item.book.isbn === book.isbn);\n\n    if (index >= 0) {\n      return {\n        ...state,\n        items: [\n          ...state.items.slice(0, index),\n          {\n            book,\n            quantity: state.items[index].quantity + 1\n          },\n          ...state.items.slice(index + 1)\n        ]\n      };\n    } else {\n      return {\n        ...state,\n        items: [\n          ...state.items,\n          {\n            book,\n            quantity: 1\n          }\n        ]\n      };\n    }\n  }),\n  on(BooksSearchPageActions.removeFromCart, (state, book) => {\n    const index = state.items.findIndex(item => item.book.isbn === book.isbn);\n\n    if (index >= 0) {\n      if (state.items[index].quantity - 1 === 0) {\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            ...state.items.slice(index + 1)\n          ]\n        };\n      } else {\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            {\n              book,\n              quantity: state.items[index].quantity - 1\n            },\n            ...state.items.slice(index + 1)\n          ]\n        };\n      }\n    } else {\n      return state;\n    }\n  })\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shopping-cart/store/shopping-cart.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/api/books.ts": [
                {
                    "name": "Offer",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "PercentageOffer | MinusOffer | SliceOffer",
                    "file": "src/app/api/books.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./books/books.module#BooksModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/books/books-routing.module.ts",
                                        "module": "BooksRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "BooksSearchComponent",
                                                "pathMatch": "full"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "BooksModule"
                            }
                        ]
                    },
                    {
                        "path": "shopping-cart",
                        "loadChildren": "./shopping-cart/shopping-cart.module#ShoppingCartModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/shopping-cart/shopping-cart-routing.module.ts",
                                        "module": "ShoppingCartRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ShoppingCartComponent",
                                                "pathMatch": "full"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ShoppingCartModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/api/books.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BooksService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/books.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Book",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/books.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CommercialOffers",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/books.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MinusOffer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/books.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PercentageOffer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/books.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SliceOffer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getShoppingCartItemQuantity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getShoppingCartItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getShoppingCartItemsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getShoppingCartState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTotalPrice",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/components/book-card/book-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/books/components/book-card/book-quantity/book-quantity.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookQuantityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/components/book-card/book-quantity/book-quantity.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithQuantity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/containers/books-search/books-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/books/pipes/search-books.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SearchBooksPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/books-search.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addToCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/books-search.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeFromCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingCartSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CartWithOffer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/components/shopping-cart-summary/shopping-cart-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/containers/shopping-cart-summary/shopping-cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingCartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/services/shopping-cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingCartService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/services/shopping-cart.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BestOffer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingCartState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/store/shopping-cart.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingCartReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/store/shopping-cart.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingCartItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}